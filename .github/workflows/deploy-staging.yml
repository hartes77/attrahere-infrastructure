name: 🚀 Deploy to Staging

on:
  push:
    branches: [main]
    paths:
      - 'src/attrahere/**'
      - 'Dockerfile'
      - 'pyproject.toml'
      - '.github/workflows/deploy-staging.yml'

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: attrahere-platform
  ECS_CLUSTER: attrahere-staging
  ECS_SERVICE: attrahere-platform-service

# OIDC permissions for AWS authentication
permissions:
  id-token: write
  contents: read

jobs:
  deploy-staging:
    name: 🏗️ Build & Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHub-Actions-Deploy-Staging
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build and push application image
        id: build-push
        run: |
          # Build actual Attrahere application image
          IMAGE_TAG=${{ github.sha }}
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          LATEST_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          
          # Build Docker image from application Dockerfile
          echo "🔨 Building Attrahere Platform application image..."
          docker build -t $IMAGE_URI -t $LATEST_URI .
          
          # Push both tagged and latest images to ECR
          echo "📤 Pushing image to ECR..."
          docker push $IMAGE_URI
          docker push $LATEST_URI
          
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "✅ Attrahere Platform application image built and pushed to ECR"
          echo "📋 Image: $IMAGE_URI"

      - name: 📋 Download current ECS task definition
        id: download-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition attrahere-platform \
            --query taskDefinition > task-definition.json
          
          echo "task-def-file=task-definition.json" >> $GITHUB_OUTPUT

      - name: 🔄 Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: attrahere-platform
          image: ${{ steps.build-push.outputs.image-uri }}

      - name: 🚀 Deploy to Amazon ECS
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: 🧪 Health Check
        run: |
          # Wait for deployment to be healthy
          sleep 30
          
          # Get the ALB endpoint (this will be set up by Terraform)
          ENDPOINT="https://api.staging.attrahere.com"
          
          # Health check with retries
          for i in {1..5}; do
            if curl -f -s "${ENDPOINT}/health"; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "⏳ Health check attempt $i failed, retrying in 30s..."
            sleep 30
          done
          
          echo "❌ Health check failed after 5 attempts"
          exit 1

      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ steps.build-push.outputs.image-uri }} (Attrahere Platform)" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Cluster**: ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Service**: ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY